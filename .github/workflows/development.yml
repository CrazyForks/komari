name: Development Environment

on:
  push:
    branches:
      - dev
  workflow_dispatch:


jobs:
  build-and-attach-binaries:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [windows, linux]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'

      - name: Clone and build frontend
        run: |
          git clone https://github.com/komari-monitor/komari-web web
          cd web
          npm install
          npm run build
          cd ..
          mkdir -p public/dist
          cp -r web/dist/* public/dist/

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          
      - name: Build application
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -o komari-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} .
          
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: komari-${{ matrix.goos }}-${{ matrix.goarch }}
          path: komari-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          
  deploy-to-production:
    needs: build-and-attach-binaries
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    
    steps:
      - name: Download Linux AMD64 binary
        uses: actions/download-artifact@v4
        with:
          name: komari-linux-amd64
          
      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
          
      - name: Add host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H komari-dev.akz.moe >> ~/.ssh/known_hosts
          
      - name: Deploy to production
        run: |
          chmod +x komari-linux-amd64
          scp komari-linux-amd64 root@komari-dev.akz.moe:/opt/komari/komari
          ssh root@komari-dev.akz.moe 'systemctl restart komari.service'