// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NezhaServiceClient is the client API for NezhaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NezhaServiceClient interface {
	ReportSystemState(ctx context.Context, opts ...grpc.CallOption) (NezhaService_ReportSystemStateClient, error)
	ReportSystemInfo(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Receipt, error)
	RequestTask(ctx context.Context, opts ...grpc.CallOption) (NezhaService_RequestTaskClient, error)
	IOStream(ctx context.Context, opts ...grpc.CallOption) (NezhaService_IOStreamClient, error)
	ReportGeoIP(ctx context.Context, in *GeoIP, opts ...grpc.CallOption) (*GeoIP, error)
	ReportSystemInfo2(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Uint64Receipt, error)
}

type nezhaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNezhaServiceClient(cc grpc.ClientConnInterface) NezhaServiceClient {
	return &nezhaServiceClient{cc}
}

func (c *nezhaServiceClient) ReportSystemState(ctx context.Context, opts ...grpc.CallOption) (NezhaService_ReportSystemStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NezhaService_serviceDesc.Streams[0], "/proto.NezhaService/ReportSystemState", opts...)
	if err != nil {
		return nil, err
	}
	x := &nezhaServiceReportSystemStateClient{stream}
	return x, nil
}

type NezhaService_ReportSystemStateClient interface {
	Send(*State) error
	Recv() (*Receipt, error)
	grpc.ClientStream
}

type nezhaServiceReportSystemStateClient struct {
	grpc.ClientStream
}

func (x *nezhaServiceReportSystemStateClient) Send(m *State) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nezhaServiceReportSystemStateClient) Recv() (*Receipt, error) {
	m := new(Receipt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nezhaServiceClient) ReportSystemInfo(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/proto.NezhaService/ReportSystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nezhaServiceClient) RequestTask(ctx context.Context, opts ...grpc.CallOption) (NezhaService_RequestTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NezhaService_serviceDesc.Streams[1], "/proto.NezhaService/RequestTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &nezhaServiceRequestTaskClient{stream}
	return x, nil
}

type NezhaService_RequestTaskClient interface {
	Send(*TaskResult) error
	Recv() (*Task, error)
	grpc.ClientStream
}

type nezhaServiceRequestTaskClient struct {
	grpc.ClientStream
}

func (x *nezhaServiceRequestTaskClient) Send(m *TaskResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nezhaServiceRequestTaskClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nezhaServiceClient) IOStream(ctx context.Context, opts ...grpc.CallOption) (NezhaService_IOStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NezhaService_serviceDesc.Streams[2], "/proto.NezhaService/IOStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &nezhaServiceIOStreamClient{stream}
	return x, nil
}

type NezhaService_IOStreamClient interface {
	Send(*IOStreamData) error
	Recv() (*IOStreamData, error)
	grpc.ClientStream
}

type nezhaServiceIOStreamClient struct {
	grpc.ClientStream
}

func (x *nezhaServiceIOStreamClient) Send(m *IOStreamData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nezhaServiceIOStreamClient) Recv() (*IOStreamData, error) {
	m := new(IOStreamData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nezhaServiceClient) ReportGeoIP(ctx context.Context, in *GeoIP, opts ...grpc.CallOption) (*GeoIP, error) {
	out := new(GeoIP)
	err := c.cc.Invoke(ctx, "/proto.NezhaService/ReportGeoIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nezhaServiceClient) ReportSystemInfo2(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Uint64Receipt, error) {
	out := new(Uint64Receipt)
	err := c.cc.Invoke(ctx, "/proto.NezhaService/ReportSystemInfo2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NezhaServiceServer is the server API for NezhaService service.
// All implementations must embed UnimplementedNezhaServiceServer
// for forward compatibility
type NezhaServiceServer interface {
	ReportSystemState(NezhaService_ReportSystemStateServer) error
	ReportSystemInfo(context.Context, *Host) (*Receipt, error)
	RequestTask(NezhaService_RequestTaskServer) error
	IOStream(NezhaService_IOStreamServer) error
	ReportGeoIP(context.Context, *GeoIP) (*GeoIP, error)
	ReportSystemInfo2(context.Context, *Host) (*Uint64Receipt, error)
	mustEmbedUnimplementedNezhaServiceServer()
}

// UnimplementedNezhaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNezhaServiceServer struct {
}

func (UnimplementedNezhaServiceServer) ReportSystemState(NezhaService_ReportSystemStateServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportSystemState not implemented")
}
func (UnimplementedNezhaServiceServer) ReportSystemInfo(context.Context, *Host) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportSystemInfo not implemented")
}
func (UnimplementedNezhaServiceServer) RequestTask(NezhaService_RequestTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestTask not implemented")
}
func (UnimplementedNezhaServiceServer) IOStream(NezhaService_IOStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method IOStream not implemented")
}
func (UnimplementedNezhaServiceServer) ReportGeoIP(context.Context, *GeoIP) (*GeoIP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportGeoIP not implemented")
}
func (UnimplementedNezhaServiceServer) ReportSystemInfo2(context.Context, *Host) (*Uint64Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportSystemInfo2 not implemented")
}
func (UnimplementedNezhaServiceServer) mustEmbedUnimplementedNezhaServiceServer() {}

// UnsafeNezhaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NezhaServiceServer will
// result in compilation errors.
type UnsafeNezhaServiceServer interface {
	mustEmbedUnimplementedNezhaServiceServer()
}

func RegisterNezhaServiceServer(s *grpc.Server, srv NezhaServiceServer) {
	s.RegisterService(&_NezhaService_serviceDesc, srv)
}

func _NezhaService_ReportSystemState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NezhaServiceServer).ReportSystemState(&nezhaServiceReportSystemStateServer{stream})
}

type NezhaService_ReportSystemStateServer interface {
	Send(*Receipt) error
	Recv() (*State, error)
	grpc.ServerStream
}

type nezhaServiceReportSystemStateServer struct {
	grpc.ServerStream
}

func (x *nezhaServiceReportSystemStateServer) Send(m *Receipt) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nezhaServiceReportSystemStateServer) Recv() (*State, error) {
	m := new(State)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NezhaService_ReportSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NezhaServiceServer).ReportSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NezhaService/ReportSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NezhaServiceServer).ReportSystemInfo(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _NezhaService_RequestTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NezhaServiceServer).RequestTask(&nezhaServiceRequestTaskServer{stream})
}

type NezhaService_RequestTaskServer interface {
	Send(*Task) error
	Recv() (*TaskResult, error)
	grpc.ServerStream
}

type nezhaServiceRequestTaskServer struct {
	grpc.ServerStream
}

func (x *nezhaServiceRequestTaskServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nezhaServiceRequestTaskServer) Recv() (*TaskResult, error) {
	m := new(TaskResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NezhaService_IOStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NezhaServiceServer).IOStream(&nezhaServiceIOStreamServer{stream})
}

type NezhaService_IOStreamServer interface {
	Send(*IOStreamData) error
	Recv() (*IOStreamData, error)
	grpc.ServerStream
}

type nezhaServiceIOStreamServer struct {
	grpc.ServerStream
}

func (x *nezhaServiceIOStreamServer) Send(m *IOStreamData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nezhaServiceIOStreamServer) Recv() (*IOStreamData, error) {
	m := new(IOStreamData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NezhaService_ReportGeoIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoIP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NezhaServiceServer).ReportGeoIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NezhaService/ReportGeoIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NezhaServiceServer).ReportGeoIP(ctx, req.(*GeoIP))
	}
	return interceptor(ctx, in, info, handler)
}

func _NezhaService_ReportSystemInfo2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NezhaServiceServer).ReportSystemInfo2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NezhaService/ReportSystemInfo2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NezhaServiceServer).ReportSystemInfo2(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

var _NezhaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NezhaService",
	HandlerType: (*NezhaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportSystemInfo",
			Handler:    _NezhaService_ReportSystemInfo_Handler,
		},
		{
			MethodName: "ReportGeoIP",
			Handler:    _NezhaService_ReportGeoIP_Handler,
		},
		{
			MethodName: "ReportSystemInfo2",
			Handler:    _NezhaService_ReportSystemInfo2_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportSystemState",
			Handler:       _NezhaService_ReportSystemState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RequestTask",
			Handler:       _NezhaService_RequestTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "IOStream",
			Handler:       _NezhaService_IOStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "compat/nezha/nezha.proto",
}
